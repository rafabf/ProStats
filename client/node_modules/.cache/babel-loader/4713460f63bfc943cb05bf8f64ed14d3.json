{"ast":null,"code":"var _jsxFileName = \"/Users/rafaelbollit/Desktop/proyecto 3/e-prostats/client/src/components/pages/match/Match.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport TeamServices from '../../../services/team.services';\nimport './match.css';\nimport UserCard from '../user/UserCard';\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis } from \"recharts\";\nimport Select from '../../ui/Select';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nclass Match extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getAllTeam();\n    };\n\n    this.getAllTeam = () => {\n      return this.services.getAllTeam().then(allteam => this.setState({\n        team: allteam\n      })).catch(err => console.log(err));\n    };\n\n    this.getMyTeam = () => {\n      this.services.getMyTeam().then(theTeam => this.setState({\n        team: theTeam\n      })).catch(err => console.log(err));\n    };\n\n    this.membersteam = (teamName, value) => {\n      console.log(value);\n      console.log(teamName); //value del input/nombre del equipo\n\n      const selector = value; //name del input/el imput que lo ha marcado\n\n      this.setState({\n        [selector]: teamName\n      }, () => {\n        // filtrar los equipos con los valores\n        if (this.state.select_1 != null && this.state.select_2 != null) {\n          //nos copiamos el team completo del state\n          const result = this.state.team.filter(team => {\n            return team.name === this.state.select_1 || team.name === this.state.select_2;\n          });\n          this.chart(result); // return result\n          //filtramos los que coincidan con los select\n          //metemos en selectedTeam el array que retorna filter\n\n          this.setState({\n            selectedTeam: result\n          });\n        }\n      });\n    };\n\n    this.num = () => {\n      Math.floor(Math.random() * (11 - 5) + 5);\n    };\n\n    this.chart = teams => {\n      // const teamData = [Object.entries(team.members.data).map(e => ({\n      //     name: e[0],\n      //     value: e[1],\n      //     fullMark: 20\n      // }))];\n      console.log(teams);\n      const averageTeam = teams.map(eachTeam => {\n        const reducedTeam = eachTeam.members.reduce((acumulado, eachMember) => {\n          acumulado.data.kills += eachMember.data.kills;\n          acumulado.data.deaths += eachMember.data.deaths;\n          acumulado.data.assists += eachMember.data.assists;\n          return acumulado;\n        }, {\n          data: {\n            kills: 0,\n            deaths: 0,\n            assists: 0\n          }\n        });\n        reducedTeam.data.kills = reducedTeam.data.kills / eachTeam.members.length;\n        reducedTeam.data.deaths = reducedTeam.deaths / eachTeam.members.length;\n        reducedTeam.data.assists = reducedTeam.data.assists / eachTeam.members.length;\n        eachTeam.average = reducedTeam;\n        return eachTeam;\n      });\n      console.log(averageTeam); //                 console.log(eachTeam)\n      //                 return eachTeam\n      // console.log(averageTeam)\n\n      return averageTeam;\n    };\n\n    this.state = {\n      team: {},\n      select_1: null,\n      select_2: null,\n      selectedTeam: null\n    };\n    this.services = new TeamServices();\n  }\n\n  render() {\n    console.log();\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"h3-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Selecciona tu equipo\"), React.createElement(Select, {\n      name: \"select_1\",\n      teams: this.state.team,\n      setMembers: this.membersteam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Selecciona el equipo del contrincante\"), React.createElement(Select, {\n      name: \"select_2\",\n      teams: this.state.team,\n      setMembers: this.membersteam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.selectedTeam && this.state.selectedTeam.map(team => {\n      return React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, team.members.map(elm => React.createElement(UserCard, Object.assign({\n        key: elm._id\n      }, elm, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }))));\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"button-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \" Generar c\\xF3digo de partida\"))));\n  }\n\n}\n\nexport default Match; // const data = [\n//     { subject: 'Math', A: 120, B: 110, fullMark: 150 },\n//     { subject: 'Chinese', A: 98, B: 130, fullMark: 150 },\n//     { subject: 'English', A: 86, B: 130, fullMark: 150 },\n//     { subject: 'Geography', A: 99, B: 100, fullMark: 150 },\n//     { subject: 'Physics', A: 85, B: 90, fullMark: 150 },\n//     { subject: 'History', A: 65, B: 85, fullMark: 150 },\n// ];\n// const TwoLevelPieChart = React.createClass({\n//     render() {\n//         return (\n//             <RadarChart cx={300} cy={250} outerRadius={150} width={600} height={500} data={data}>\n//                 <PolarGrid />\n//                 <PolarAngleAxis dataKey=\"subject\" />\n//                 <PolarRadiusAxis angle={30} domain={[0, 150]} />\n//                 <Radar name=\"Mike\" dataKey=\"A\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n//                 <Radar name=\"Lily\" dataKey=\"B\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\n//                 <Legend />\n//             </RadarChart>\n//         );\n//     }\n// })","map":{"version":3,"sources":["/Users/rafaelbollit/Desktop/proyecto 3/e-prostats/client/src/components/pages/match/Match.js"],"names":["React","Component","Container","TeamServices","UserCard","Radar","RadarChart","PolarGrid","PolarAngleAxis","Select","Row","Col","Button","Match","constructor","props","componentDidMount","getAllTeam","services","then","allteam","setState","team","catch","err","console","log","getMyTeam","theTeam","membersteam","teamName","value","selector","state","select_1","select_2","result","filter","name","chart","selectedTeam","num","Math","floor","random","teams","averageTeam","map","eachTeam","reducedTeam","members","reduce","acumulado","eachMember","data","kills","deaths","assists","length","average","render","elm","_id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport TeamServices from '../../../services/team.services'\nimport './match.css'\nimport UserCard from '../user/UserCard'\n\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis } from \"recharts\";\nimport Select from '../../ui/Select'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\n\nclass Match extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = { team: {}, select_1: null, select_2: null, selectedTeam: null }\n        this.services = new TeamServices()\n    }\n\n    componentDidMount = () => {\n        this.getAllTeam()\n\n    }\n\n    getAllTeam = () => {\n        return this.services.getAllTeam()\n            .then(allteam => this.setState({ team: allteam }))\n            .catch(err => console.log(err))\n    }\n\n    getMyTeam = () => {\n        this.services.getMyTeam()\n            .then(theTeam => this.setState({ team: theTeam }))\n            .catch(err => console.log(err))\n    }\n\n    membersteam = (teamName, value) => {\n        console.log(value)\n        console.log(teamName) //value del input/nombre del equipo\n        const selector = value//name del input/el imput que lo ha marcado\n        this.setState({ [selector]: teamName }, () => {\n\n            // filtrar los equipos con los valores\n            if (this.state.select_1 != null && this.state.select_2 != null) {\n                //nos copiamos el team completo del state\n                const result = this.state.team.filter(team => {\n                    return team.name === this.state.select_1 || team.name === this.state.select_2\n                })\n\n                this.chart(result)\n                // return result\n                //filtramos los que coincidan con los select\n                //metemos en selectedTeam el array que retorna filter\n                this.setState({ selectedTeam: result });\n            }\n        })\n    }\n\n    num = () => {\n        Math.floor((Math.random() * (11 - 5)) + 5);\n    }\n\n    chart = (teams) => {\n        // const teamData = [Object.entries(team.members.data).map(e => ({\n        //     name: e[0],\n        //     value: e[1],\n        //     fullMark: 20\n        // }))];\n        console.log(teams)\n        const averageTeam = teams.map(eachTeam => {\n            const reducedTeam = eachTeam.members.reduce((acumulado, eachMember) => {\n                acumulado.data.kills += eachMember.data.kills\n                acumulado.data.deaths += eachMember.data.deaths\n                acumulado.data.assists += eachMember.data.assists\n\n                return acumulado\n            },\n                { data: { kills: 0, deaths: 0, assists: 0 } })\n\n\n            reducedTeam.data.kills = reducedTeam.data.kills / eachTeam.members.length\n            reducedTeam.data.deaths = reducedTeam.deaths / eachTeam.members.length\n            reducedTeam.data.assists = reducedTeam.data.assists / eachTeam.members.length\n            eachTeam.average = reducedTeam\n            return eachTeam\n        })\n\n\n        console.log(averageTeam)\n        //                 console.log(eachTeam)\n        //                 return eachTeam\n        // console.log(averageTeam)\n        return averageTeam\n    }\n\n\n    render() {\n        console.log()\n        return (\n            <Container>\n                <Row>\n                    <Col><h3 className=\"h3-style\">Selecciona tu equipo</h3>\n                        <Select name=\"select_1\" teams={this.state.team} setMembers={this.membersteam} />\n                    </Col>\n                    <Col><h3>Selecciona el equipo del contrincante</h3>\n                        <Select name=\"select_2\" teams={this.state.team} setMembers={this.membersteam} />\n                    </Col>\n                </Row>\n                <Row>\n\n                    {this.state.selectedTeam && this.state.selectedTeam.map(team => {\n\n                        return <Col>\n                            {team.members.map(elm => <UserCard key={elm._id} {...elm} />)}\n                        </Col>\n                    })\n                    }\n                </Row>\n                {/* pintar aqui chart */}\n                {/* <RadarChart\n                    cx={600}\n                    cy={500}\n                    outerRadius={300}\n                    width={1000}\n                    height={800}\n                    data={teamDataReducido}\n                >\n                    <PolarGrid />\n                    <PolarAngleAxis dataKey=\"name\" />\n                    <Radar\n                        name=\"Mike\"\n                        dataKey=\"value\"\n                        stroke=\"#7784d8\"\n                        fill=\"#8884d8\"\n                        fillOpacity={0.6}\n                    />\n                </RadarChart> */}\n                <Row>\n                    <Col>\n                        <Button className=\"button-style\" > Generar código de partida</Button>\n                    </Col>\n                </Row>\n            </Container >\n        )\n    }\n}\n\n\n\n\n\n\n\nexport default Match\n\n\n// const data = [\n//     { subject: 'Math', A: 120, B: 110, fullMark: 150 },\n//     { subject: 'Chinese', A: 98, B: 130, fullMark: 150 },\n//     { subject: 'English', A: 86, B: 130, fullMark: 150 },\n//     { subject: 'Geography', A: 99, B: 100, fullMark: 150 },\n//     { subject: 'Physics', A: 85, B: 90, fullMark: 150 },\n//     { subject: 'History', A: 65, B: 85, fullMark: 150 },\n// ];\n\n// const TwoLevelPieChart = React.createClass({\n//     render() {\n//         return (\n//             <RadarChart cx={300} cy={250} outerRadius={150} width={600} height={500} data={data}>\n//                 <PolarGrid />\n//                 <PolarAngleAxis dataKey=\"subject\" />\n//                 <PolarRadiusAxis angle={30} domain={[0, 150]} />\n//                 <Radar name=\"Mike\" dataKey=\"A\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n//                 <Radar name=\"Lily\" dataKey=\"B\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\n//                 <Legend />\n\n//             </RadarChart>\n//         );\n//     }\n// })\n"]},"metadata":{},"sourceType":"module"}