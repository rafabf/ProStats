{"ast":null,"code":"var _jsxFileName = \"/Users/rafaelbollit/Desktop/proyecto 3/e-prostats/client/src/components/pages/match/Match.js\";\nimport React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport TeamServices from '../../../services/team.services';\nimport './match.css';\nimport UserCard from '../user/UserCard';\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, Legend, PolarRadiusAxis } from \"recharts\";\nimport Select from '../../ui/Select';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass Match extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getAllTeam();\n    };\n\n    this.getAllTeam = () => {\n      return this.services.getAllTeam().then(allteam => this.setState({\n        team: allteam\n      })).catch(err => console.log(err));\n    };\n\n    this.getMyTeam = () => {\n      this.services.getMyTeam().then(theTeam => this.setState({\n        team: theTeam\n      })).catch(err => console.log(err));\n    };\n\n    this.membersteam = (teamName, value) => {\n      console.log(value);\n      console.log(teamName); //value del input/nombre del equipo\n\n      const selector = value; //name del input/el imput que lo ha marcado\n\n      this.setState({\n        [selector]: teamName\n      }, () => {\n        // filtrar los equipos con los valores\n        if (this.state.select_1 != null && this.state.select_2 != null) {\n          //nos copiamos el team completo del state\n          const result = this.state.team.filter(team => {\n            return team.name === this.state.select_1 || team.name === this.state.select_2;\n          });\n          const average = this.getAverage(result);\n          console.log(average);\n          const dataChart = this.chart(average); // return result\n          //filtramos los que coincidan con los select\n          //metemos en selectedTeam el array que retorna filter\n\n          this.setState({\n            selectedTeam: result,\n            dataChar: dataChart\n          });\n        }\n      });\n    };\n\n    this.num = () => {\n      Math.floor(Math.random() * (11 - 5) + 5);\n    };\n\n    this.getAverage = teams => {\n      const averageTeam = teams.map(eachTeam => {\n        //Iteramos cada equipo con el map\n        const reducedTeam = eachTeam.members.reduce((acumulado, eachMember) => {\n          //Reducimos a un unico elemento\n          acumulado.data.kills += parseFloat(eachMember.data.kills);\n          acumulado.data.deaths += parseFloat(eachMember.data.deaths);\n          acumulado.data.assists += parseFloat(eachMember.data.assists);\n          return acumulado;\n        }, {\n          data: {\n            kills: 0,\n            deaths: 0,\n            assists: 0\n          }\n        }); //a cada equipo le ponemos una propiedad nueva average con la media.\n\n        reducedTeam.data.kills = reducedTeam.data.kills / eachTeam.members.length;\n        reducedTeam.data.deaths = reducedTeam.data.deaths / eachTeam.members.length;\n        reducedTeam.data.assists = reducedTeam.data.assists / eachTeam.members.length;\n        eachTeam.average = reducedTeam; //devolvemos el equipo modificado\n\n        return eachTeam;\n      });\n      return averageTeam;\n    };\n\n    this.closelink = () => this.setState({\n      showlink: false\n    });\n\n    this.openlink = () => this.setState({\n      showlink: true\n    });\n\n    this.state = {\n      team: {},\n      select_1: null,\n      select_2: null,\n      selectedTeam: null,\n      random: \"\"\n    };\n    this.services = new TeamServices();\n  }\n\n  handleClick() {\n    const min = 1;\n    const max = 100;\n    const Rand = min + Math.random() * (max - min);\n    this.setState({\n      random: this.state.random + Rand\n    });\n  }\n\n  chart(average) {\n    const kills = {\n      avg: \"kills\",\n      A: average[0].average.data.kills,\n      B: average[1].average.data.kills,\n      fullMark: 20\n    };\n    const assists = {\n      avg: \"assists\",\n      A: average[0].average.data.assists,\n      B: average[1].average.data.assists,\n      fullMark: 20\n    };\n    const deaths = {\n      avg: \"deaths\",\n      A: average[0].average.data.deaths,\n      B: average[1].average.data.deaths,\n      fullMark: 20\n    };\n    const allData = [kills, deaths, assists];\n    return allData;\n  }\n\n  render() {\n    console.log();\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Col, {\n      className: \"stylecol\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"h3-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Selecciona tu equipo\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"select-style\",\n      name: \"select_1\",\n      teams: this.state.team,\n      setMembers: this.membersteam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"h3-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Selecciona el equipo del contrincante\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(Select, {\n      className: \"select-style\",\n      name: \"select_2\",\n      teams: this.state.team,\n      setMembers: this.membersteam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"stylerow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.selectedTeam && this.state.selectedTeam.map(team => {\n      return React.createElement(Col, {\n        md: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, team.members.map(elm => React.createElement(Col, {\n        md: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(UserCard, Object.assign({\n        key: elm._id\n      }, elm, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }))))));\n    })), this.state.select_1 != null && this.state.select_2 != null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(RadarChart, {\n      cx: 550,\n      cy: 250,\n      outerRadius: 150,\n      width: 600,\n      height: 500,\n      data: this.state.dataChar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(PolarGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(PolarAngleAxis, {\n      dataKey: \"avg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(PolarRadiusAxis, {\n      angle: 90,\n      domain: [0, 20],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(Radar, {\n      name: this.state.select_1,\n      dataKey: \"A\",\n      stroke: \"#0473EA\",\n      fill: \"#0473EA\",\n      fillOpacity: 0.6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(Radar, {\n      name: this.state.select_2,\n      dataKey: \"B\",\n      stroke: \"#FA0000\",\n      fill: \"#FA0000\",\n      fillOpacity: 0.6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"div-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button-style\",\n      onClick: this.handleClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"--Generar c\\xF3digo de partida--\"), React.createElement(\"div\", {\n      className: \"div-style number-style\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.state.random)))));\n  }\n\n}\n\nexport default Match; // const TwoLevelPieChart = React.createClass({\n//     render() {\n//         return (\n//             <RadarChart cx={300} cy={250} outerRadius={150} width={600} height={500} data={data}>\n//                 <PolarGrid />\n//                 <PolarAngleAxis dataKey=\"subject\" />\n//                 <PolarRadiusAxis angle={30} domain={[0, 150]} />\n//                 <Radar name=\"Mike\" dataKey=\"A\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n//                 <Radar name=\"Lily\" dataKey=\"B\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\n//                 <Legend />\n//             </RadarChart>\n//         );\n//     }\n// })","map":{"version":3,"sources":["/Users/rafaelbollit/Desktop/proyecto 3/e-prostats/client/src/components/pages/match/Match.js"],"names":["React","Component","Container","TeamServices","UserCard","Radar","RadarChart","PolarGrid","PolarAngleAxis","Legend","PolarRadiusAxis","Select","Row","Col","Match","constructor","props","componentDidMount","getAllTeam","services","then","allteam","setState","team","catch","err","console","log","getMyTeam","theTeam","membersteam","teamName","value","selector","state","select_1","select_2","result","filter","name","average","getAverage","dataChart","chart","selectedTeam","dataChar","num","Math","floor","random","teams","averageTeam","map","eachTeam","reducedTeam","members","reduce","acumulado","eachMember","data","kills","parseFloat","deaths","assists","length","closelink","showlink","openlink","handleClick","min","max","Rand","avg","A","B","fullMark","allData","render","elm","_id","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport TeamServices from '../../../services/team.services'\nimport './match.css'\nimport UserCard from '../user/UserCard'\n\n\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, Legend, PolarRadiusAxis } from \"recharts\";\nimport Select from '../../ui/Select'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\n\nclass Match extends Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            team: {},\n            select_1: null,\n            select_2: null,\n            selectedTeam: null,\n            random: \"\"\n        }\n        this.services = new TeamServices()\n    }\n\n    componentDidMount = () => {\n        this.getAllTeam()\n\n    }\n    handleClick() {\n        const min = 1;\n        const max = 100;\n        const Rand = min + Math.random() * (max - min);\n        this.setState({ random: this.state.random + Rand });\n    }\n\n    getAllTeam = () => {\n        return this.services.getAllTeam()\n            .then(allteam => this.setState({ team: allteam }))\n            .catch(err => console.log(err))\n    }\n\n    getMyTeam = () => {\n        this.services.getMyTeam()\n            .then(theTeam => this.setState({ team: theTeam }))\n            .catch(err => console.log(err))\n    }\n\n    membersteam = (teamName, value) => {\n        console.log(value)\n        console.log(teamName) //value del input/nombre del equipo\n        const selector = value//name del input/el imput que lo ha marcado\n        this.setState({ [selector]: teamName }, () => {\n\n            // filtrar los equipos con los valores\n            if (this.state.select_1 != null && this.state.select_2 != null) {\n                //nos copiamos el team completo del state\n                const result = this.state.team.filter(team => {\n                    return team.name === this.state.select_1 || team.name === this.state.select_2\n                })\n\n                const average = this.getAverage(result)\n                console.log(average)\n                const dataChart = this.chart(average)\n\n                // return result\n                //filtramos los que coincidan con los select\n                //metemos en selectedTeam el array que retorna filter\n                this.setState({ selectedTeam: result, dataChar: dataChart });\n            }\n        })\n    }\n\n    num = () => {\n        Math.floor((Math.random() * (11 - 5)) + 5);\n    }\n\n    getAverage = (teams) => {\n\n        const averageTeam = teams.map(eachTeam => {\n            //Iteramos cada equipo con el map\n            const reducedTeam = eachTeam.members.reduce((acumulado, eachMember) => {\n                //Reducimos a un unico elemento\n                acumulado.data.kills += parseFloat(eachMember.data.kills)\n                acumulado.data.deaths += parseFloat(eachMember.data.deaths)\n                acumulado.data.assists += parseFloat(eachMember.data.assists)\n\n                return acumulado\n            },\n                { data: { kills: 0, deaths: 0, assists: 0 } })\n\n            //a cada equipo le ponemos una propiedad nueva average con la media.\n            reducedTeam.data.kills = reducedTeam.data.kills / eachTeam.members.length\n            reducedTeam.data.deaths = reducedTeam.data.deaths / eachTeam.members.length\n            reducedTeam.data.assists = reducedTeam.data.assists / eachTeam.members.length\n            eachTeam.average = reducedTeam\n            //devolvemos el equipo modificado\n            return eachTeam\n        })\n\n        return averageTeam\n    }\n\n    chart(average) {\n\n        const kills = { avg: \"kills\", A: average[0].average.data.kills, B: average[1].average.data.kills, fullMark: 20 }\n        const assists = { avg: \"assists\", A: average[0].average.data.assists, B: average[1].average.data.assists, fullMark: 20 }\n        const deaths = { avg: \"deaths\", A: average[0].average.data.deaths, B: average[1].average.data.deaths, fullMark: 20 }\n\n\n        const allData = [kills, deaths, assists]\n\n        return allData\n\n\n    }\n\n\n\n\n\n\n    closelink = () => this.setState({ showlink: false })\n    openlink = () => this.setState({ showlink: true })\n\n\n    render() {\n        console.log()\n        return (\n            <Container>\n                <Row>\n                    <Col className=\"stylecol\">\n                        <h3 className=\"h3-style\">Selecciona tu equipo</h3>\n                        <hr></hr>\n                        <Select className=\"select-style\" name=\"select_1\" teams={this.state.team} setMembers={this.membersteam} />\n                    </Col>\n\n                    <Col>\n                        <h3 className=\"h3-style\">Selecciona el equipo del contrincante</h3>\n                        <hr></hr>\n                        <Select className=\"select-style\" name=\"select_2\" teams={this.state.team} setMembers={this.membersteam} />\n                    </Col>\n                </Row>\n                <Row className=\"stylerow\">\n                    {this.state.selectedTeam &&\n                        this.state.selectedTeam.map(team => {\n                            return (\n                                <Col md={6}>\n                                    <Row>\n                                        {team.members.map(elm => (\n                                            <Col md={4}>\n                                                <UserCard key={elm._id} {...elm} />\n                                            </Col>\n                                        ))}\n                                    </Row>\n                                </Col>\n                            );\n                        })}\n                </Row>\n                {this.state.select_1 != null && this.state.select_2 != null &&\n                    <Row>\n                        <Col md={12}>\n                            <RadarChart cx={550} cy={250} outerRadius={150} width={600} height={500} data={this.state.dataChar}>\n                                <PolarGrid />\n                                <PolarAngleAxis dataKey=\"avg\" />\n                                <PolarRadiusAxis angle={90} domain={[0, 20]} />\n                                <Radar name={this.state.select_1} dataKey=\"A\" stroke=\"#0473EA\" fill=\"#0473EA\" fillOpacity={0.6} />\n                                <Radar name={this.state.select_2} dataKey=\"B\" stroke=\"#FA0000\" fill=\"#FA0000\" fillOpacity={0.6} />\n                                <Legend />\n\n                            </RadarChart>\n                        </Col>\n\n                    </Row>\n                }\n                <Row>\n                    <Col md={12}>\n                        <div className=\"div-style\">\n                            <button className=\"button-style\" onClick={this.handleClick.bind(this)}>--Generar código de partida--</button>\n                            <div className=\"div-style number-style\">{this.state.random}</div>\n                        </div>\n                    </Col>\n                </Row>\n            </Container >\n        )\n    }\n}\n\n\n\n\n\n\n\nexport default Match\n\n\n// const TwoLevelPieChart = React.createClass({\n//     render() {\n//         return (\n//             <RadarChart cx={300} cy={250} outerRadius={150} width={600} height={500} data={data}>\n//                 <PolarGrid />\n//                 <PolarAngleAxis dataKey=\"subject\" />\n//                 <PolarRadiusAxis angle={30} domain={[0, 150]} />\n//                 <Radar name=\"Mike\" dataKey=\"A\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\n//                 <Radar name=\"Lily\" dataKey=\"B\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\n//                 <Legend />\n\n//             </RadarChart>\n//         );\n//     }\n// })\n"]},"metadata":{},"sourceType":"module"}